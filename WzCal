#include<cmath>
#include<memory>
#include<iostream>
#define MAX 100
class Cal
{
public:
    //操作数栈
    double nums[MAX];
    //下一个插入位置
    int numIndex = 0;

    //符号栈
    char operators[MAX];
    //下一个插入位置
    int operIndex = 0;

    //str当前处理 index
    int index = 0;

    double cal(const char* str, int len) {

        while (index < len) {
            //操作符 左括号直接入栈
            if (isOperator(str[index]) || str[index] == '(') {
                operators[operIndex++] = str[index++];
            }
            //右括号 计算括号内表达式
            else if (str[index] == ')') {
                while (operators[operIndex - 1] != '(') {
                    calTwoInStack();
                }
                //skip )
                index++;
                //skip (
                operIndex--;
            }
            else {
                double num = 0;
                bool frac = false;
                int fracDigits = -1;

                //这个while读取数字到num中
                while (index < len && (!isOperator(str[index]) && !isBracket(str[index]))) {
                    if (isDigit(str[index])) {
                        if (!frac) {
                            num = num * 10 + str[index] - '0';
                        }
                        else {
                            num = num + (str[index] - '0') * pow(10, fracDigits);
                            fracDigits--;
                        }
                    }
                    else if (str[index] == '.') {
                        frac = true;
                    }
                    index++;
                }
                nums[numIndex++] = num;

                //对当前数字的下一个字符分2种情况
                //1 str结尾        计算->结束
                //2 操作符         判断前一个操作符优先级是否小于下一个 否 计算->继续
                if (index >= len) {
                    while (operIndex > 0) {
                        calTwoInStack();
                    }
                }
                else if (operIndex && operators[operIndex - 1] != '(' && notLess(operators[operIndex - 1], str[index])) {
                    calTwoInStack();
                }
            }
        }

        //处理最后是）的特殊情况
        while (operIndex > 0) {
            calTwoInStack();
        }
        return nums[0];
    }
    bool isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }
    bool isBracket(char c) {
        return c == '(' || c == ')';
    }
    bool isDigit(char c) {
        return c >= '0' && c <= '9';
    }
    bool notLess(char first, char second) {
        return (first == '*' || first == '/') && (second == '+' || second == '-');
    }
    double calTwo(double first, double second, char oper) {
        switch (oper)
        {
        case '+':
            return first + second;
        case '-':
            return first - second;
        case '*':
            return first * second;
        case '/':
            //todo second=0
            return first / second;
        }
        return 0;
    }
    void calTwoInStack() {
        double tmp = calTwo(nums[numIndex - 1], nums[numIndex - 2], operators[operIndex - 1]);
        nums[numIndex - 2] = tmp;
        operIndex--;
        numIndex--;
    }
};

class Cal1
{
public:
    const char* s;
    bool* flag;
    double* result;
    double cal1(const char* str, int len) {
        s = str;
        //左括号index
        int leftIndex = len - 1;

        flag = new bool[len];
        memset(flag, false, len);
        result = new double[len];

        while (leftIndex >= 0) {
            if (str[leftIndex] == '(')
                break;
            leftIndex--;
        }
        while (leftIndex >= 0) {
            int rightIndex = leftIndex + 1;
            while (rightIndex < len) {
                if (!flag[rightIndex]&&str[rightIndex] == ')')
                    break;
                rightIndex++;
            }

            double bracket = calStrNoBracket1(leftIndex + 1, rightIndex - 1);
            for (int i = leftIndex; i <= rightIndex; i++) {
                flag[i] = true;
            }
            result[leftIndex] = bracket;

            leftIndex--;
            while (leftIndex >= 0) {
                if (s[leftIndex] == '(')
                    break;
                leftIndex--;
            }
        }
        return calStrNoBracket1(0, len - 1);
    }

    double calStrNoBracket(const char* str, int len) {//
        //操作数栈
        double nums[MAX];
        //下一个插入位置
        int numIndex = 0;

        //符号栈
        char operators[MAX];
        //下一个插入位置
        int operIndex = 0;

        //str当前处理 index
        int index = 0;

        while (index < len) {//“7.7+1.1*2”
            //操作符直接入栈
            if (isOperator(str[index])) {
                operators[operIndex] = str[index];
                operIndex++;
                index++;
            }
            else {
                double num = 0;
                bool frac = false;
                int fracDigits = -1;
                //这个while读取数字到num中
                while (index < len && !isOperator(str[index])) {
                    if (isDigit(str[index])) {
                        if (!frac) {
                            num = num * 10 + str[index] - '0';
                        }
                        else {
                            num = num + (str[index] - '0') * pow(10, fracDigits);
                            fracDigits--;
                        }
                    }
                    else if (str[index] == '.') {
                        frac = true;
                    }
                    index++;
                }
                nums[numIndex++] = num;
                
                //对当前数字的下一个字符分2种情况
                //1 str结尾        计算->结束
                //2 操作符         判断前一个操作符优先级是否小于下一个 否 计算->继续
                if (index >= len) {
                    while (operIndex > 0) {
                        double tmp = calTwo(nums[numIndex - 1], nums[numIndex - 2], operators[operIndex - 1]);
                        nums[numIndex - 2] = tmp;
                        operIndex--;
                        numIndex--;
                    }
                }
                else if (operIndex  != 0 && notLess(operators[operIndex - 1], str[index])) {
                    double tmp = calTwo(nums[numIndex - 1], nums[numIndex - 2], operators[operIndex - 1]);
                    nums[numIndex - 2] = tmp;
                    operIndex--;
                    numIndex--;
                }
            }
        }
        return nums[0];
    }

    double calStrNoBracket1(int leftIndex, int rightIndex) {
        //操作数栈
        double nums[MAX];
        //下一个插入位置
        int numIndex = 0;

        //符号栈
        char operators[MAX];
        //下一个插入位置
        int operIndex = 0;

        //str当前处理 index
        int index = leftIndex;

        while (index <= rightIndex) {
            //操作符直接入栈
            if (isOperator(s[index])) {
                operators[operIndex++] = s[index++];
            }
            else {
                double num = 0;
                if (flag[index]) {
                    num = result[index];
                    while (flag[index] && index <= rightIndex)
                        index++;
                }
                else {
                    bool frac = false;
                    int fracDigits = -1;

                    //这个while读取数字到num中
                    while (index <= rightIndex && !isOperator(s[index])) {
                        if (isDigit(s[index])) {
                            if (!frac) {
                                num = num * 10 + s[index] - '0';
                            }
                            else {
                                num = num + (s[index] - '0') * pow(10, fracDigits);
                                fracDigits--;
                            }
                        }
                        else if (s[index] == '.') {
                            frac = true;
                        }
                        index++;
                    }
                }

                nums[numIndex++] = num;

                //对当前数字的下一个字符分2种情况
                //1 str结尾        计算->结束
                //2 操作符         判断前一个操作符优先级是否小于下一个 否 计算->继续
                if (index > rightIndex) {
                    while (operIndex > 0) {
                        double tmp = calTwo(nums[numIndex - 2], nums[numIndex - 1], operators[operIndex - 1]);
                        nums[numIndex - 2] = tmp;
                        operIndex--;
                        numIndex--;
                    }
                }
                else if (operIndex && notLess(operators[operIndex - 1], s[index])) {
                    while (operIndex > 0) {
                        double tmp = calTwo(nums[numIndex - 2], nums[numIndex - 1], operators[operIndex - 1]);
                        nums[numIndex - 2] = tmp;
                        operIndex--;
                        numIndex--;
                    }
                }
            }
        }
        return nums[0];
    }

    bool isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }
    bool isDigit(char c) {
        return c >= '0' && c <= '9';
    }
    bool notLess(char first, char second) {
        return (first == '*' || first == '/') || (second == '+' || second == '-');
    }
    double calTwo(double first, double second, char oper) {
        switch (oper)
        {
        case '+':
            return first + second;
        case '-':
            return first - second;
        case '*':
            return first * second;
        case '/':
            //todo second=0
            return first / second;
        }
        return 0;
    }
};

int main() {
    Cal1 c;
    //c.cal1("(1.1+(1.1+1.1))*3+1.1*(1+1)", 27);
    std::cout<<c.cal1("2.15+2/(3.14-2*9.857+1.154*(2.132-2/4.125))", 43);

}
